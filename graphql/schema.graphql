"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")

type Query {
    users: [User!]! @paginate(defaultCount: 50)
    user(id: ID @eq): User @find

    posts: [Post!]! @all
    post(id: Int! @eq): Post @find,
    latestPost: Post!

    books: [Book] @all
    book(id: ID @eq): Book! @find

    categories: [Category] @all
    category(id: ID @eq): Category! @find

    booksByCategory(category_id: ID @eq): [Book] @all
    booksByFeatured(featured: Boolean @eq): [Book] @all
    booksByAuthorName(author: String @eq): [Book] @all
}
type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    posts: [Post!]! @hasMany
}

type Post {
    id: ID!
    title: String!
    content: String!
    author: User! @belongsTo
    comments: [Comment!]! @hasMany
}
type Book {
    id: ID!,
    title: String!,
    author: String!,
    image: String,
    link: String,
    description: String,
    featured: Boolean,
    category: Category! @belongsTo

    
}
type Category {
    id: ID!,
    name: String!,
    books: [Book] @hasMany

}
type Comment {
    id: ID!
    reply: String!
    post: Post! @belongsTo
}
type Mutation {
    createUser(
        name: String! @rules(apply: ["required", "max:255","min:3"]),
        email: String! @rules(apply: ["required", "email", "unique:users,email"])
        password: String! @rules(apply: ["required", "min:6"]) @hash 

    ): User! @create

    createCategory(
        name: String! @rules(apply: ["required", "max:255","min:3","unique:categories,name"])
    ): Category! @create

    updateCategory(
        id: ID! @rules(apply: ["required"]),
        name: String! @rules(apply: ["required", "max:255","min:3","unique:categories,name"])
    ): Category! @update

    deleteCategory(
        id: ID! @rules(apply: ["required"])
    ): Category! @delete

    createBook(
        title: String! @rules(apply: ["required", "max:255","min:3"]),
        author: String! @rules(apply: ["required", "max:255","min:3"]),
        image: String,
        link: String,
        description: String,
        featured: Boolean,
        category: Int

    ): Book! @create

    updateBook(
        id: ID! @rules(apply: ["required"]),
        title: String! @rules(apply: ["required", "max:255","min:3"]),
        author: String! @rules(apply: ["required", "max:255","min:3"]),
        image: String,
        link: String,
        description: String,
        featured: Boolean,
        category: Int
    ): Book! @update

    deleteBook(
        id: ID! @rules(apply: ["required"])
    ): Book! @delete

}
